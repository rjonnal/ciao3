#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
from matplotlib import pyplot as plt
import pandas as pd


# In[2]:


pupil_size = 10e-3

# get time array and slope array from csv, via pandas
buf_fn = './slopes_buffer/slopes_buffer_20240119093130.csv'
df = pd.read_csv(buf_fn)
arr = np.array(df)
t = arr[:,1]
slopes_all = arr[:,2:]

# load reconstructors and masks
zernike_matrix = np.loadtxt('etc/wf/zernike_matrix.txt')
wavefront_matrix = np.loadtxt('etc/wf/wavefront_matrix.txt')
slope_matrix = np.loadtxt('etc/wf/slope_matrix.txt')
ref_mask = np.loadtxt('etc/ref/reference_mask.txt')
ref = np.loadtxt('etc/ref/reference.txt')


# In[8]:


# plot zernike coefficients for a single measurement
slopes = slopes_all[100,:]
coefs = np.dot(zernike_matrix,slopes)
coef_indices = np.arange(len(coefs))
plt.bar(coef_indices,coefs)
plt.xlabel('zernike index')
plt.ylabel('zernike coefficient')
plt.show()


# In[4]:


# plot wavefront
wavefront_arr = np.dot(wavefront_matrix,coefs)*(pupil_size/2.0)
wavefront = np.zeros(ref_mask.shape)
wavefront[np.where(ref_mask)] = wavefront_arr

error = np.std(wavefront_arr)*1e9

plt.subplot(1,2,1)
plt.imshow(wavefront)
plt.colorbar()
plt.title('rms error = %0.1f nm'%error)
ax = plt.axes([0.6,.2,0.35,.8],projection='3d')
mask_width = ref_mask.shape[1]
coords = np.linspace(-pupil_size/2.0,pupil_size/2.0,mask_width)
xx,yy = np.meshgrid(coords,coords)
surf = ax.plot_wireframe(xx,yy,wavefront,rstride=1,cstride=1,color='k')
ax.view_init(elev=60., azim=40)


# In[5]:


# compute all coefs
coefs_all = []

for k in range(slopes_all.shape[0]):
    slopes = slopes_all[k,:]
    coefs = np.dot(zernike_matrix,slopes)
    coefs_all.append(coefs)
    
coefs_all = np.array(coefs_all)


# In[6]:


# temporal power spectrum of coefs
coefs_all_fft = np.fft.fft(coefs_all,axis=0)


# In[7]:


tps = np.mean(np.abs(coefs_all_fft),axis=1)**2
dt = np.median(np.diff(t))
freq = np.fft.fftfreq(len(tps),dt)
plt.loglog(freq,tps)


# In[ ]:


coef_indices = np.arange(len(coefs))
wavefront = np.zeros(ref_mask.shape)
fig = plt.figure()
ax = fig.subplots(1,1)
for k in range(slopes_all.shape[0]):
    slopes = slopes_all[k,:]
    coefs = np.dot(zernike_matrix,slopes)
    wavefront_arr = np.dot(wavefront_matrix,coefs)*(pupil_size/2.0)
    wavefront[np.where(ref_mask)] = wavefront_arr
    error = np.std(wavefront_arr)*1e9 # nm
    ax.clear()
    ax.plot(coefs)
    plt.pause(.1)


# In[ ]:




