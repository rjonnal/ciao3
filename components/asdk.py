# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Alpao SDK module
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_asdk', [dirname(__file__)])
        except ImportError:
            import _asdk
            return _asdk
        if fp is not None:
            try:
                _mod = imp.load_module('_asdk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _asdk = swig_import_helper()
    del swig_import_helper
else:
    import _asdk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class DM(_object):
    """Proxy of C++ acs::DM class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(acs::DM self, acs::CStrConst serialNumber) -> DM"""
        this = _asdk.new_DM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _asdk.delete_DM
    __del__ = lambda self : None;
    def Reset(self):
        """Reset(DM self) -> acs::COMPL_STAT"""
        return _asdk.DM_Reset(self)

    def Stop(self):
        """Stop(DM self) -> acs::COMPL_STAT"""
        return _asdk.DM_Stop(self)

    def Send(self, *args):
        """
        Send(DM self, acs::Scalar const * values) -> acs::COMPL_STAT
        Send(DM self, acs::Scalar const * values, acs::UInt nPattern, acs::UInt nRepeat=1) -> acs::COMPL_STAT
        Send(DM self, acs::Scalar const * values, acs::UInt nPattern) -> acs::COMPL_STAT
        """
        return _asdk.DM_Send(self, *args)

    def Get(self, *args):
        """Get(DM self, acs::CStrConst command) -> acs::Scalar"""
        return _asdk.DM_Get(self, *args)

    def Set(self, *args):
        """
        Set(DM self, acs::CStrConst command, acs::Scalar value)
        Set(DM self, acs::CStrConst command, acs::Int value)
        Set(DM self, acs::CStrConst command, acs::CStrConst str)
        """
        return _asdk.DM_Set(self, *args)

    def Check():
        """Check() -> acs::Bool"""
        return _asdk.DM_Check()

    if _newclass:Check = staticmethod(Check)
    __swig_getmethods__["Check"] = lambda x: Check
    def GetLastError():
        """GetLastError() -> acs::UInt"""
        return _asdk.DM_GetLastError()

    if _newclass:GetLastError = staticmethod(GetLastError)
    __swig_getmethods__["GetLastError"] = lambda x: GetLastError
    def __str__(self):
        """__str__(DM self) -> char *"""
        return _asdk.DM___str__(self)

DM_swigregister = _asdk.DM_swigregister
DM_swigregister(DM)

def DM_Check():
  """DM_Check() -> acs::Bool"""
  return _asdk.DM_Check()

def DM_GetLastError():
  """DM_GetLastError() -> acs::UInt"""
  return _asdk.DM_GetLastError()


def __lshift__(*args):
  """__lshift__(std::ostream & arg1, DM arg2) -> std::ostream &"""
  return _asdk.__lshift__(*args)
# This file is compatible with both classic and new-style classes.


